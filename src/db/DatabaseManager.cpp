#include "DatabaseManager.h"
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QMessageBox>
#include <QApplication>
#include <QDebug>

DatabaseManager* DatabaseManager::instance = nullptr;

DatabaseManager::DatabaseManager(QObject *parent) : QObject(parent)
{
    // Vérifier les drivers disponibles
    QStringList drivers = QSqlDatabase::drivers();
    qDebug() << "Drivers SQL disponibles:" << drivers;

    // Utiliser Oracle (QOCI) comme driver principal
    if (drivers.contains("QOCI")) {
        database = QSqlDatabase::addDatabase("QOCI");
        qDebug() << "Utilisation du driver QOCI (Oracle)";
    } else {
        // Fallback vers QODBC si QOCI n'est pas disponible
        database = QSqlDatabase::addDatabase("QODBC");
        qDebug() << "Utilisation du driver QODBC en fallback";
    }
}

DatabaseManager* DatabaseManager::getInstance()
{
    if (instance == nullptr) {
        instance = new DatabaseManager();
    }
    return instance;
}

DatabaseManager::~DatabaseManager()
{
    disconnectFromDatabase();
}

bool DatabaseManager::connectToDatabase()
{
    // Vérifier les drivers disponibles à nouveau avant la connexion
    QStringList drivers = QSqlDatabase::drivers();
    qDebug() << "Drivers SQL disponibles avant connexion:" << drivers;
    
    // Afficher où Qt cherche les plugins
    qDebug() << "Qt Library Paths:" << QApplication::libraryPaths();
    
    // Tentative de chargement manuel du pilote
    QApplication::addLibraryPath(QApplication::applicationDirPath() + "/sqldrivers");
    QApplication::addLibraryPath(QApplication::applicationDirPath());
    
    // Configuration Oracle
    database.setHostName("localhost");
    database.setDatabaseName("XE");
    database.setUserName("system");
    database.setPassword("++652100"); 
    database.setPort(1521);
    
    qDebug() << "Tentative de connexion Oracle avec: "
             << "Driver=" << database.driverName()
             << "Host=" << database.hostName()
             << "DB=" << database.databaseName()
             << "User=" << database.userName()
             << "Port=" << database.port();

    if (!database.open()) {
        QString error = "Erreur de connexion à la base de données Oracle:\n" + database.lastError().text();
        showDatabaseError(error);
        return false;
    }

    qDebug() << "Connexion à Oracle réussie !";
    
    // Créer les tables avec la structure complète
    createTables();
    
    return true;
}

void DatabaseManager::disconnectFromDatabase()
{
    if (database.isOpen()) {
        database.close();
        qDebug() << "Déconnexion de la base de données";
    }
}

bool DatabaseManager::isConnected()
{
    return database.isOpen();
}

void DatabaseManager::showDatabaseError(const QString& message)
{
    QMessageBox::critical(nullptr, "Erreur de base de données", message);
    qCritical() << message;
}

QSqlQuery DatabaseManager::executeQuery(const QString& queryString)
{
    QSqlQuery query(database);
    if (!query.exec(queryString)) {
        QString error = "Erreur d'exécution de la requête:\n" + query.lastError().text();
        showDatabaseError(error);
    }
    return query;
}

QSqlQuery DatabaseManager::executePreparedQuery(const QString& queryString, const QVariantList& values)
{
    QSqlQuery query(database);
    query.prepare(queryString);

    for (const QVariant& value : values) {
        query.addBindValue(value);
    }

    if (!query.exec()) {
        QString error = "Erreur d'exécution de la requête préparée:\n" + query.lastError().text();
        showDatabaseError(error);
    }

    return query;
}

bool DatabaseManager::beginTransaction()
{
    return database.transaction();
}

bool DatabaseManager::commitTransaction()
{
    return database.commit();
}

bool DatabaseManager::rollbackTransaction()
{
    return database.rollback();
}

QString DatabaseManager::getLastError()
{
    return database.lastError().text();
}

// Méthodes pour la création des tables et l'insertion des données
// Puisque la base de données est déjà créée et remplie, ces méthodes retournent simplement true

bool DatabaseManager::createTables()
{
    qDebug() << "Début de la création des tables Oracle...";
    
    // Supprimer les tables existantes
    QStringList dropQueries = {
        "DROP TABLE COMMANDES CASCADE CONSTRAINTS",
        "DROP TABLE LIVREURS CASCADE CONSTRAINTS"
    };
    
    for (const QString& dropQuery : dropQueries) {
        QSqlQuery query(database);
        query.exec(dropQuery);
        qDebug() << "DROP:" << dropQuery << "Résultat:" << (query.lastError().isValid() ? query.lastError().text() : "OK");
    }
    
    // Créer la table LIVREURS avec TOUS les champs
    QString createLivreurs = R"(
        CREATE TABLE LIVREURS (
            ID_LIVREUR NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            NOM VARCHAR2(100) NOT NULL,
            TELEPHONE VARCHAR2(20) NOT NULL,
            ZONE_LIVRAISON VARCHAR2(100) NOT NULL,
            VEHICULE VARCHAR2(50) NOT NULL,
            DISPONIBILITE NUMBER(1) DEFAULT 1 CHECK (DISPONIBILITE IN (0,1)),
            CREATED_AT DATE DEFAULT SYSDATE,
            UPDATED_AT DATE DEFAULT SYSDATE
        )
    )";
    
    QSqlQuery queryLivreurs(database);
    qDebug() << "Exécution de:" << createLivreurs;
    if (!queryLivreurs.exec(createLivreurs)) {
        qDebug() << "Erreur création table LIVREURS:" << queryLivreurs.lastError().text();
        return false;
    }
    qDebug() << "Table créée avec succès";
    
    // Créer la table COMMANDES
    QString createCommandes = R"(
        CREATE TABLE COMMANDES (
            ID_COMMANDE NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            DATE_COMMANDE DATE NOT NULL,
            STATUT VARCHAR2(50) DEFAULT 'En attente' CHECK (STATUT IN ('En attente', 'En cours', 'Livree', 'Annulee')),
            VILLE_LIVRAISON VARCHAR2(100) NOT NULL,
            ID_CLIENT NUMBER NOT NULL,
            ID_LIVREUR NUMBER,
            CREATED_AT DATE DEFAULT SYSDATE,
            UPDATED_AT DATE DEFAULT SYSDATE,
            CONSTRAINT FK_COMMANDES_LIVREUR FOREIGN KEY (ID_LIVREUR) REFERENCES LIVREURS(ID_LIVREUR)
        )
    )";
    
    QSqlQuery queryCommandes(database);
    qDebug() << "Exécution de:" << createCommandes;
    if (!queryCommandes.exec(createCommandes)) {
        qDebug() << "Erreur création table COMMANDES:" << queryCommandes.lastError().text();
        return false;
    }
    qDebug() << "Table créée avec succès";
    
    // Créer des index et triggers pour l'auto-update
    QStringList indexQueries = {
        "CREATE INDEX IDX_LIVREURS_NOM ON LIVREURS(NOM)",
        "CREATE INDEX IDX_LIVREURS_ZONE ON LIVREURS(ZONE_LIVRAISON)",
        "CREATE INDEX IDX_LIVREURS_DISPONIBILITE ON LIVREURS(DISPONIBILITE)",
        "CREATE INDEX IDX_COMMANDES_STATUT ON COMMANDES(STATUT)",
        "CREATE INDEX IDX_COMMANDES_DATE ON COMMANDES(DATE_COMMANDE)",
        "CREATE INDEX IDX_COMMANDES_VILLE ON COMMANDES(VILLE_LIVRAISON)",
        "CREATE INDEX IDX_COMMANDES_LIVREUR ON COMMANDES(ID_LIVREUR)"
    };
    
    for (const QString& indexQuery : indexQueries) {
        QSqlQuery query(database);
        query.exec(indexQuery);
        qDebug() << "Index/Trigger créé avec succès";
    }
    
    // NE PAS insérer des données de test automatiquement - utiliser seulement les vraies données
    // qDebug() << "Insertion de données de test...";
    // insertSampleData();
    // qDebug() << "Données de test insérées avec succès";
    
    qDebug() << "Création des tables terminée avec succès";
    return true;
}

bool DatabaseManager::insertSampleData()
{
    // Insérer des livreurs de test avec TOUS les champs
    QStringList livreursData = {
        "INSERT INTO LIVREURS (NOM, TELEPHONE, ZONE_LIVRAISON, VEHICULE, DISPONIBILITE) VALUES ('Ahmed Ben Ali', '22123456', 'Tunis Centre', 'Moto Yamaha', 1)",
        "INSERT INTO LIVREURS (NOM, TELEPHONE, ZONE_LIVRAISON, VEHICULE, DISPONIBILITE) VALUES ('Fatma Khalil', '98765432', 'Ariana', 'Voiture Peugeot', 1)",
        "INSERT INTO LIVREURS (NOM, TELEPHONE, ZONE_LIVRAISON, VEHICULE, DISPONIBILITE) VALUES ('Mohamed Sassi', '55666777', 'Sfax Nord', 'Camionnette', 0)",
        "INSERT INTO LIVREURS (NOM, TELEPHONE, ZONE_LIVRAISON, VEHICULE, DISPONIBILITE) VALUES ('Leila Trabelsi', '20304050', 'Sousse Centre', 'Moto Honda', 1)",
        "INSERT INTO LIVREURS (NOM, TELEPHONE, ZONE_LIVRAISON, VEHICULE, DISPONIBILITE) VALUES ('Karim Mansouri', '70809090', 'Monastir', 'Voiture Renault', 1)"
    };
    
    for (const QString& livreurQuery : livreursData) {
        QSqlQuery query(database);
        if (!query.exec(livreurQuery)) {
            qDebug() << "Erreur insertion livreur:" << query.lastError().text();
            return false;
        }
        qDebug() << "Livreur inséré avec succès";
    }
    
    // Insérer des commandes de test
    QStringList commandesData = {
        "INSERT INTO COMMANDES (DATE_COMMANDE, STATUT, VILLE_LIVRAISON, ID_CLIENT, ID_LIVREUR) VALUES (SYSDATE-5, 'Livree', 'Tunis', 1001, 1)",
        "INSERT INTO COMMANDES (DATE_COMMANDE, STATUT, VILLE_LIVRAISON, ID_CLIENT, ID_LIVREUR) VALUES (SYSDATE-3, 'En cours', 'Ariana', 1002, 2)",
        "INSERT INTO COMMANDES (DATE_COMMANDE, STATUT, VILLE_LIVRAISON, ID_CLIENT, ID_LIVREUR) VALUES (SYSDATE-10, 'En cours', 'Sfax', 1003, 3)",
        "INSERT INTO COMMANDES (DATE_COMMANDE, STATUT, VILLE_LIVRAISON, ID_CLIENT, ID_LIVREUR) VALUES (SYSDATE-1, 'En attente', 'Sousse', 1004, NULL)",
        "INSERT INTO COMMANDES (DATE_COMMANDE, STATUT, VILLE_LIVRAISON, ID_CLIENT, ID_LIVREUR) VALUES (SYSDATE-2, 'En cours', 'Monastir', 1005, 5)",
        "INSERT INTO COMMANDES (DATE_COMMANDE, STATUT, VILLE_LIVRAISON, ID_CLIENT, ID_LIVREUR) VALUES (SYSDATE, 'En attente', 'Tunis', 1006, NULL)",
        "INSERT INTO COMMANDES (DATE_COMMANDE, STATUT, VILLE_LIVRAISON, ID_CLIENT, ID_LIVREUR) VALUES (SYSDATE-7, 'Livree', 'Gabes', 1007, 4)"
    };
    
    for (const QString& commandeQuery : commandesData) {
        QSqlQuery query(database);
        if (!query.exec(commandeQuery)) {
            qDebug() << "Erreur insertion commande:" << query.lastError().text();
            return false;
        }
        qDebug() << "Commande insérée avec succès";
    }
    
    return true;
}
